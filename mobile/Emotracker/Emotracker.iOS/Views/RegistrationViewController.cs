// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Emotracker.Core;
using System.Drawing;

namespace Emotracker.iOS
{
	public partial class RegistrationViewController : UIViewController
	{
		private UIView activeview;
		private float scrollamount = 0.0f;    // amount to scroll 
		private float bottom = 0.0f;           // bottom point
		private float offset = 10.0f;          // extra offset
		private bool moveViewUp = false;

		LoadingOverlay loadingOverlay;
		public static UIStoryboard Storyboard = UIStoryboard.FromName ("Main", null);
		public static UIViewController resultsViewController;

		public RegistrationService registrationService = new RegistrationService ();

		public RegistrationViewController() : base()
		{
			resultsViewController = Storyboard.InstantiateViewController("ResultsViewController") as UIViewController;
		}

		public RegistrationViewController (IntPtr handle) : base (handle)
		{
			resultsViewController = Storyboard.InstantiateViewController("ResultsViewController") as UIViewController;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.nameField.ShouldReturn += (textField) => {
				this.userName.BecomeFirstResponder ();
				return true;
			};
			this.userName.ShouldReturn += (textField) => {
				this.emailField.BecomeFirstResponder ();
				return true;
			};
			this.emailField.ShouldReturn += (textField) => {
				this.passwordField.BecomeFirstResponder ();

				scrollamount = 50.0f;
				ScrollTheView (true);
				return true;
			};
			this.passwordField.ShouldReturn += (textField) => {
				this.passwordField.ResignFirstResponder ();

				doRegister();

				return true;
			};

			this.registrationButton.TouchUpInside += (object sender, EventArgs e) => {
				doRegister();
			};


			//keyboard popup
			NSNotificationCenter.DefaultCenter.AddObserver
				(UIKeyboard.DidShowNotification,KeyBoardUpNotification);
			// Keyboard Down
			NSNotificationCenter.DefaultCenter.AddObserver
				(UIKeyboard.WillHideNotification,KeyBoardDownNotification);
		}

		public void doRegister() {
			loadingOverlay = new LoadingOverlay (UIScreen.MainScreen.Bounds, "Signing up..");
			View.Add (loadingOverlay);

			OperationResult res = registrationService.registerNewUser (getRegistrationDTO ());
			loadingOverlay.Hide();

			if (res.Result == false) {
				regMessageLabel.Text = res.Message;
				messageView.Hidden = false;
			} else {
				this.PresentViewController (resultsViewController, true, null);
			}
		}

		private void KeyBoardUpNotification(NSNotification notification)
		{
			// get the keyboard size
			//RectangleF r = UIKeyboard.BoundsFromNotification (notification);

			var val = new NSValue(notification.UserInfo.ValueForKey(UIKeyboard.FrameBeginUserInfoKey).Handle);
			RectangleF r = val.RectangleFValue;

			// Find what opened the keyboard
			foreach (UIView view in this.View.Subviews) {
				if (view.IsFirstResponder)
					activeview = view;
			}

			// Bottom of the controller = initial position + height + offset      
			bottom = (activeview.Frame.Y + activeview.Frame.Height + offset);

			// Calculate how far we need to scroll
			scrollamount = (r.Height - (View.Frame.Size.Height - bottom)) ;

			// Perform the scrolling
			if (scrollamount > 0) {
				moveViewUp = true;
				ScrollTheView (moveViewUp);
			} else {
				moveViewUp = false;
			}

		}

		private void KeyBoardDownNotification(NSNotification notification)
		{
			if(moveViewUp){ScrollTheView(false);}
		}

		private void ScrollTheView(bool move)
		{
			// scroll the view up or down
			UIView.BeginAnimations (string.Empty, System.IntPtr.Zero);
			UIView.SetAnimationDuration (0.3);

			RectangleF frame = View.Frame;

			if (move) {
				frame.Y -= scrollamount;
			} else {
				frame.Y += scrollamount;
				scrollamount = 0;
			}

			View.Frame = frame;
			UIView.CommitAnimations();
		}

		public RegistrationDTO getRegistrationDTO() {
			string fullname = this.nameField.Text;
			string username = this.userName.Text;
			string email = this.emailField.Text;
			string password = this.passwordField.Text;

			RegistrationDTO dto = new RegistrationDTO (fullname, username, password, email);
			return dto;
		}
	}
}
